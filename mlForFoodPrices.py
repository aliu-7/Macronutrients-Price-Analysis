# -*- coding: utf-8 -*-
"""Machine learning for meal planning

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oHjPR2qemzQ8_pCAQwSn3JK2w2QV3mi9
"""

!pip install rapidfuzz

import pandas as pd
import re
from google.colab import files

# Upload CSV file
print("Upload 'items_with_cost.csv'")
uploaded = files.upload()

# Load dataset
price_df = pd.read_csv("items_with_cost.csv")

# Define portion conversions to grams (for weight-based items)
portion_conversions = {
    "per lb": 453.6,   # Pound to grams
    "per dozen": 600,   # Assume 12 individual units of Grade A large eggs
    "per gallon": 3785,  # Gallon to milliliters
    "per 1/2 gallon": 1892,  # Half gallon to milliliters
    "per pint": 473.2,  # Pint to milliliters
    "per 1 liter": 1000,  # Liter to milliliters
    "per 16 oz": 453.6,  # 16 oz = ~1 lb
    "per 12 oz": 340.2,  # 12 oz = 340.2g
    "per 100g": 100  # Already standardized
}

# Extract portion sizes from descriptions
def extract_portion(description):
    for unit, value in portion_conversions.items():
        if unit in description:
            return value
    return None  # Unknown portion

price_df["Portion Size"] = price_df["Item"].apply(extract_portion)

# Convert prices to per 100g
price_df["Price per 100g"] = price_df.apply(
    lambda row: row["Value"] / (row["Portion Size"] / 100) if pd.notna(row["Portion Size"]) else None,
    axis=1
)

# Save and Download the Converted Dataset
converted_filename = "converted_items_with_cost.csv"
price_df.to_csv(converted_filename, index=False)

print(f"Converted dataset saved as '{converted_filename}'.")

files.download(converted_filename)

import pandas as pd
from rapidfuzz import process, fuzz
from google.colab import files

# Upload required files
print("Upload 'name_items_with_cost.csv', 'food.csv', 'food_nutrient.csv', and 'nutrient.csv'")
uploaded = files.upload()

# Load datasets
price_df = pd.read_csv("name_items_with_cost.csv")
food_df = pd.read_csv("food.csv")
food_nutrient_df = pd.read_csv("food_nutrient.csv", low_memory=False)
nutrient_df = pd.read_csv("nutrient.csv")

print("Price DF Columns:", price_df.columns)
print("Food Columns:", food_df.columns)
print("Nutrient Columns:", nutrient_df.columns)
print("Food Nutrient Columns:", food_nutrient_df.columns)

### Step 1: Print dataset shapes
print("\nDataset Shapes:")
print(f"price_df: {price_df.shape}")
print(f"food_df: {food_df.shape}")
print(f"food_nutrient_df: {food_nutrient_df.shape}")
print(f"nutrient_df: {nutrient_df.shape}")

# Clean text for better matching
def clean_text(text):
    return re.sub(r'[^a-z0-9 ]', '', str(text).lower().strip())  # Removes special characters

price_df["Cleaned Name"] = price_df["Item"].apply(clean_text)
food_df["Cleaned Name"] = food_df["description"].apply(clean_text)

# Step 2: Remove duplicates in food_df
food_df = food_df.drop_duplicates(subset=["Cleaned Name"])

# Debugging Step 3: Print cleaned food names
print("\nSample Cleaned Names from price_df:")
print(price_df["Cleaned Name"].head(10))
print("\nSample Cleaned Names from food_df:")
print(food_df["Cleaned Name"].head(10))

# Match Price Data to USDA Food Database using Fuzzy Matching
def fuzzy_match(food_name, choices):
    match_result = process.extractOne(food_name, choices, scorer=fuzz.partial_ratio)
    if match_result:
        match, score, *_ = match_result  # Extract only match and score
        print(f"Matching '{food_name}' â†’ '{match}' (Score: {score})")  # Debugging output
        return match if score > 70 else None  # Threshold check
    return None

usda_foods = food_df["Cleaned Name"].tolist()
price_df["Matched USDA Food"] = price_df["Cleaned Name"].apply(lambda x: fuzzy_match(x, usda_foods))

# Step 4: Check how many items got a match
print("\nFuzzy Matching Summary:")
print(price_df["Matched USDA Food"].isna().sum(), "items did not match.")

# Step 5: Ensure Text Standardization Before Merge
price_df["Matched USDA Food"] = price_df["Matched USDA Food"].apply(clean_text)
food_df["Cleaned Name"] = food_df["Cleaned Name"].apply(clean_text)

# Step 6: Check for missing fdc_id values in food_df
missing_fdc = food_df[food_df["fdc_id"].isna()]
print("\nFoods without fdc_id in food_df:", missing_fdc.shape[0])

# Merge to get fdc_id
merged_df = price_df.merge(food_df, left_on="Matched USDA Food", right_on="Cleaned Name", how="left")

# Step 7: Check missing fdc_ids after merge
print("\nAfter Merging with food_df:")
print(merged_df["fdc_id"].isna().sum(), "items still missing an fdc_id.")

# Get Macronutrient Data
nutrient_ids = {
    1003: "Protein (g)",
    1004: "Fat (g)",
    1005: "Carbohydrates (g)"
}

# Filter relevant nutrients
food_nutrient_df = food_nutrient_df[food_nutrient_df["nutrient_id"].isin(nutrient_ids.keys())]

# Merge with nutrient names
food_nutrient_df["Nutrient Name"] = food_nutrient_df["nutrient_id"].map(nutrient_ids)

# Pivot table to get nutrients as columns
nutrients_pivot = food_nutrient_df.pivot(index="fdc_id", columns="Nutrient Name", values="amount").reset_index()

# Step 8: Check if nutrient pivot was successful
print("\nNutrient Pivot Table Shape:", nutrients_pivot.shape)
print(nutrients_pivot.head())

# Merge with Main Dataset
final_df = merged_df.merge(nutrients_pivot, on="fdc_id", how="left")

# Step 9: Check missing macronutrients before dropping NaNs
print("\nMissing Macronutrients Before Dropping NaNs:")
print(final_df[["Protein (g)", "Fat (g)", "Carbohydrates (g)"]].isna().sum())

# TEMPORARILY disable dropping NaNs to inspect data
# final_df = final_df.dropna(subset=["Protein (g)", "Fat (g)", "Carbohydrates (g)"])

# Save and Download the Final Dataset
final_filename = "debugged_food_macronutrients.csv"
final_df.to_csv(final_filename, index=False)

print(f"\nDebugged dataset saved as '{final_filename}'.")

files.download(final_filename)

# Load the CSV file (replace 'macros.csv' with the correct file path if needed)
uploaded = files.upload()
file_path = "macros.csv"
df = pd.read_csv(file_path)

# Keep only relevant columns (Item, Price per 100g, Carbs, Fat, Protein)
df = df.iloc[:, :5]

# Calculate calories using the standard formula:
# Calories = (Protein * 4) + (Carbohydrates * 4) + (Fat * 9)
df["Calories (kcal)"] = (df["Protein (g)"] * 4) + (df["Carbohydrates (g)"] * 4) + (df["Fat (g)"] * 9)

# Save the updated file
output_file = "updated_macros.csv"
df.to_csv(output_file, index=False)

# Print confirmation and display first few rows
print(f"Updated file saved as: {output_file}")
print(df.head())

final_filename = "price_macros.csv"
df.to_csv(final_filename, index=False)

print(f"\nDebugged dataset saved as '{final_filename}'.")

files.download(final_filename)